{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Question","react_default","a","createElement","type","className","placeholder","name","this","props","onChange","Component","Survey","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addQuestion","bind","assertThisInitialized","handleChange","seeSurvey","getAnswers","counter","answerNumber","state","value","questionComponents","answers","printSurvey","event","_this2","preventDefault","newArray","_loop","i","console","log","push","check","_loop2","letter","String","fromCharCode","printAnswerComponent","setState","valueArray","target","answer","ansNum","num","match","_this3","currentCounter","concat","App_Question","App_Answers","_this4","length","questions","map","Element","index","key","onSubmit","id","onClick","href","MultipleChoiceAnswer","Answers","_this5","addAnswer","multipleAnswerComponents","_this6","currentLetter","App_MultipleChoiceAnswer","_this7","CreateSurvey","App_Survey","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd4dfd5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass Question extends Component {\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" className=\"questionInput\" placeholder=\"Question\" name={this.props.name} onChange={this.props.onChange} />\n        <div className=\"underline\"></div>\n      </div> \n    );\n  }\n}\n\nclass Survey extends Component {\n\n  constructor(props) {\n    super(props);\n    this.addQuestion = this.addQuestion.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.seeSurvey = this.seeSurvey.bind(this);\n    this.getAnswers = this.getAnswers.bind(this);\n    this.counter = 1;\n    this.answerNumber = '';\n    this.state = {\n      value: [],\n      questionComponents: [],\n      answers: '',\n      printSurvey: []\n    }\n  }\n\n  seeSurvey(event) {\n    \n    event.preventDefault();\n    let newArray = [];\n    \n    for (let i = 1; i <= this.counter; i++) {\n\n      const printQuestionComponent = () => {\n        return <p>Question no {i}: {this.state.value['question' + i]}</p>\n      }\n      console.log(this.state.value['question'+i]);\n\n      if(this.state.value['question'+i] != null && this.state.value['question'+i] != ''){\n        \n        newArray.push(printQuestionComponent);\n\n        let check = true;\n        var counter = 0;\n        \n        while(check){\n          const letter = String.fromCharCode(65 + counter);\n          \n          if(this.state.value['answer' + i + letter]){\n            var printAnswerComponent = () => {\n              //<input type=\"text\" placeholder=\"Your answer\" />\n\n              return <p>Answer choice: {this.state.value['answer' + i + letter]}</p>\n            }\n            counter = counter + 1;\n            newArray.push(printAnswerComponent);\n          \n          }else{\n            check = false;\n          }\n        }\n      }\n    }\n    \n    this.setState({ printSurvey: newArray });\n  }\n\n  handleChange(event) {\n    const valueArray = this.state.value;\n    valueArray[event.target.name] = event.target.value;\n    this.setState({ value: valueArray });\n    console.log(valueArray);\n  }\n\n  getAnswers(answer, ansNum) {\n    const num = ansNum.match(/[0-9]+[A-Z]/g);\n    const valueArray = this.state.value;\n    valueArray['answer' + num] = answer;\n    this.setState({ value: valueArray });\n    console.log(valueArray);\n  }\n\n  addQuestion() {\n    const currentCounter = this.counter + 1;\n    this.counter = this.counter + 1;\n    const questionComponent = () => {\n      return <div>\n        <Question name={'question' + currentCounter} onChange={this.handleChange} />\n        <Answers answers={this.getAnswers} counter={currentCounter} />\n      </div>\n    }\n    const newArray = this.state.questionComponents.concat(questionComponent);\n    this.setState({ questionComponents: newArray });\n  }\n\n  render() {\n\n    if (this.state.questionComponents.length === 0) {\n\n      const currentCounter = this.counter;\n\n      const questionComponent = () => {\n        return <div>\n          <Question name={'question' + currentCounter} onChange={this.handleChange} />\n          <Answers answers={this.getAnswers} counter={currentCounter} />\n        </div>\n      }\n      \n      this.state.questionComponents.push(questionComponent);\n\n    }\n\n    const questions = this.state.questionComponents.map((Element, index) => {\n      return <Element key={index} index={index} />\n    });\n    \n    const printSurvey = this.state.printSurvey.map((Element, index) => {\n      return <Element key={index} index={index} />\n    });\n    \n    return (\n      <div>\n        <form onSubmit={this.seeSurvey}>\n          <div className=\"inputs\">\n            {questions}\n          </div>\n          <a id=\"addQuestion\" onClick={this.addQuestion} href=\"#\"><span>+</span> Question</a>\n          <p><input id=\"saveSurvey\" type=\"submit\" value=\"Survey Preview\" /></p>\n        </form>\n        <div className=\"printedSurvey\">\n          {printSurvey}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ShortAnswer extends Component {\n  render() {\n    return (\n      <div>\n        <input type=\"text\" className=\"answerInput\" placeholder=\"Short answer text\" name={this.props.name} disabled />\n        <div className=\"underlineAnswer\"></div>\n      </div>\n    );\n\n  }\n}\nclass MultipleChoiceAnswer extends Component {\n  render() {\n    return (\n      <div className=\"multipleAnswer\">\n        <div className=\"multipleChoiceCircle\"></div><input type=\"text\" className=\"multipleAnswerInput\" placeholder=\"Option\" name={this.props.name} onChange={this.props.onChange} />\n      </div>\n    );\n\n  }\n}\n\nclass Answers extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.addAnswer = this.addAnswer.bind(this);\n    this.counter = 0;\n    this.state = {\n      multipleAnswerComponents : []\n    }\n  }\n\n  handleChange(event) {\n\n    this.props.answers(event.target.value, event.target.name);\n    console.log(event.target.name);\n\n  }\n\n  addAnswer() {\n    this.counter = this.counter + 1;\n    const currentLetter = String.fromCharCode(65 + this.counter);\n    const answerComponent = () => {\n      return <MultipleChoiceAnswer name={'answer' + this.props.counter + currentLetter} onChange={this.handleChange} />\n    }\n    const newArray = this.state.multipleAnswerComponents.concat(answerComponent);\n    this.setState({ multipleAnswerComponents: newArray });\n  }\n  \n  render() {\n//<ShortAnswer name={'answer' + this.props.counter} />\n    if (this.state.multipleAnswerComponents.length === 0) {\n\n      const currentLetter = String.fromCharCode(65 + this.counter);\n\n      const answerComponent = () => {\n        return <MultipleChoiceAnswer name={'answer' + this.props.counter + currentLetter} onChange={this.handleChange} />\n      }\n      \n      this.state.multipleAnswerComponents.push(answerComponent);\n\n    }\n\n    const answers = this.state.multipleAnswerComponents.map((Element, index) => {\n      return <Element key={index} index={index} />\n    });\n\n    return (\n      <div>\n        <div className=\"inputs\">\n            {answers}\n        </div>\n        <a id=\"addAnswer\" onClick={this.addAnswer} href=\"#\"><span>+</span> Answer</a>\n      </div>\n    );\n  }\n}\n\nclass CreateSurvey extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Survey />\n\n      </div>\n    );\n  }\n}\n\nexport default CreateSurvey;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}