{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Question","react_default","a","createElement","type","className","placeholder","name","this","props","onChange","Component","Survey","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addQuestion","bind","assertThisInitialized","handleChange","seeSurvey","getAnswers","counter","answerNumber","state","value","questionComponents","answers","printSurvey","event","_this2","preventDefault","newArray","_loop","i","push","setState","valueArray","target","console","log","answer","ansNum","num","match","_this3","currentCounter","concat","App_Question","App_Answers","_this4","length","questions","map","Element","index","key","onSubmit","id","onClick","href","ShortAnswer","disabled","Answers","_this5","App_ShortAnswer","CreateSurvey","App_Survey","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c18b737.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass Question extends Component {\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" className=\"questionInput\" placeholder=\"Question\" name={this.props.name} onChange={this.props.onChange} />\n        <div className=\"underline\"></div>\n      </div>\n    );\n  }\n}\n\nclass Survey extends Component {\n\n  constructor(props) {\n    super(props);\n    this.addQuestion = this.addQuestion.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.seeSurvey = this.seeSurvey.bind(this);\n    this.getAnswers = this.getAnswers.bind(this);\n    this.counter = 1;\n    this.answerNumber = '';\n    this.state = {\n      value: [],\n      questionComponents: [],\n      answers: '',\n      printSurvey: []\n    }\n  }\n\n  seeSurvey(event) {\n    \n    event.preventDefault();\n    let newArray = [];\n    \n    for (let i = 1; i <= this.counter; i++) {\n\n      const printQuestionComponent = () => {\n        return <div><p>Question no {i}: {this.state.value['question' + i]}</p></div>\n      }\n    \n      const printAnswerComponent = () => {\n        return <div><input type=\"text\" placeholder=\"Your answer\" /></div>\n      }\n      if(this.state.value['question'+i] != null){\n        newArray.push(printQuestionComponent);\n        newArray.push(printAnswerComponent);\n      }\n    }\n    \n    this.setState({ printSurvey: newArray });\n  }\n\n  handleChange(event) {\n    const valueArray = this.state.value;\n    valueArray[event.target.name] = event.target.value;\n    this.setState({ value: valueArray });\n    console.log(valueArray);\n    console.log(event.target.value);\n  }\n\n  getAnswers(answer, ansNum) {\n    const num = ansNum.match(/[0-9]+/g);\n    const valueArray = this.state.value;\n    valueArray['answer' + num] = answer;\n    this.setState({ value: valueArray });\n    console.log(valueArray);\n  }\n\n  addQuestion() {\n    const currentCounter = this.counter + 1;\n    this.counter = this.counter + 1;\n    const questionComponent = () => {\n      return <div>\n        <Question name={'question' + currentCounter} onChange={this.handleChange} />\n        <Answers counter={currentCounter} />\n      </div>\n    }\n    const newArray = this.state.questionComponents.concat(questionComponent);\n    this.setState({ questionComponents: newArray });\n  }\n\n  render() {\n\n    if (this.state.questionComponents.length === 0) {\n\n      const currentCounter = this.counter;\n\n      const questionComponent = () => {\n        return <div>\n          <Question name={'question' + currentCounter} onChange={this.handleChange} />\n          <Answers counter={currentCounter} />\n        </div>\n      }\n      \n      this.state.questionComponents.push(questionComponent);\n\n    }\n\n    const questions = this.state.questionComponents.map((Element, index) => {\n      return <Element key={index} index={index} />\n    });\n    \n    const printSurvey = this.state.printSurvey.map((Element, index) => {\n      return <Element key={index} index={index} />\n    });\n    \n    return (\n      <div>\n        <form onSubmit={this.seeSurvey}>\n          <div className=\"inputs\">\n            {questions}\n          </div>\n          <a id=\"addQuestion\" onClick={this.addQuestion} href=\"#\"><span>+</span> Question</a>\n          <p><input id=\"saveSurvey\" type=\"submit\" value=\"Survey Preview\" /></p>\n        </form>\n        <div className=\"printedSurvey\">\n          {printSurvey}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ShortAnswer extends Component {\n  render() {\n    return (\n      <div>\n        <input type=\"text\" className=\"answerInput\" placeholder=\"Short answer text\" name={this.props.name} disabled />\n        <div className=\"underline\"></div>\n      </div>\n    );\n\n  }\n}\n\nclass Answers extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n\n    this.props.answers(event.target.value, event.target.name);\n    console.log(event.target.name);\n\n  }\n  \n  render() {\n\n    return (\n      <div>\n        <div className=\"inputs\">\n          <ShortAnswer name={'answer' + this.props.counter} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass CreateSurvey extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Survey />\n\n      </div>\n    );\n  }\n}\n\nexport default CreateSurvey;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}